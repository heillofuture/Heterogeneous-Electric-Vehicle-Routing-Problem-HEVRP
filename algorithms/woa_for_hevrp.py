# -*- coding: utf-8 -*-
"""woa for hevrp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nzETdFgukpzLoreNL53eNWvZG6xDipZS
"""

import random as random
import numpy as np
import math
import time

class WOA:
    def __init__(self, fitness, nodes, fleet, num_of_pop, max_iter):
        self.start = time.time()
        self.best_fitness= -1
        self.best_whale = []

        population = [generate_whale(customer_list) for _ in range(num_of_pop)]

        iterasi = 0
        while iterasi < max_iter:
            iterasi += 1

            for whale in population:
                fitness_value = fitness(whale, nodes, fleet)
                route = get_feasible_route(whale, nodes, fleet)
                route_to_id = route_to_id(route, nodes)
                if fitness < self.best_fitness or self.best_fitness == -1:
                    self.best_whale = list(whale)
                    self.best_fitness = float(fitness)
                    self.best_route = route_to_id

            a = 2 - iterasi * ((2) / max_iter)

            for j in range(num_of_pop):
                b = 1
                r1 = random.random()
                r2 = random.random()
                l = random.randint(-1,1)
                p = random.random()
                A = 2 * a * r1 - a
                C = 2 * r2

                if p < 0.5:
                    if abs(A) < 1:
                      D = [abs(C * self.best_whale[i] - population[j][i]) for i in range(len(population[j]))]
                      population[j] = [self.best_whale[i] - A * D[i] for i in range(len(population[j]))]
                    else:
                      X_rand = generate_individual(customer_list)
                      D = [abs(C * X_rand[i] - population[j][i]) for i in range(len(population[j]))]
                      population[j] = [X_rand[i] - A * D[i] for i in range(len(population[j]))]
                else:
                   D = [abs(self.best_whale[i] - population[j][i]) for i in range(len(population[j]))]
                   population[j] = [D[i] * np.exp(b * l) * np.cos(2 * np.pi * l) + self.best_whale[i]
                                   for i in range(len(population[j]))]

    def show_result(self):
        print('\nRESULT:\n')
        computation_time = self.end - self.start
        total_distance = self.best_fitness
        route_optimal = self.best_route
        whale = self.best_whale
        print(f'Best whale : {whale}')
        print(f'Optimal route (ID): {route_optimal_id}')
        print(f'Total ditance: {total_distance}')
        print(f'Computation time: {computation_time}')