# -*- coding: utf-8 -*-
"""Input data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1or95aDFHHggOeQV_2LVR2-iLbMLmlPX4
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np

#Reading the instance data
def read_instance(instance):
        file_path = 'drive/MyDrive/_problem_instances/exercise_instances/' + instance + '.txt'
        nodes = []

        with open(file_path, "rt") as f:
            lines = f.readlines()

            # Iterating over the lines in the file to extract information
            for line in lines[1:]:
                stl = line.split()

                # Extracting node information
                if len(stl) == 8:
                    node = {
                        'StringID' : stl[0],
                        'node_type' : stl[1],
                        'x' : float(stl[2]),
                        'y' : float(stl[3]),
                        'demand' : float(stl[4]),
                        'ready_time' : float(stl[5]),
                        'due_time' : float(stl[6]),
                        'service_time' : float(stl[7]),
                    }
                    nodes.append(node)

        return nodes

#Reading the fleet data
def read_fleet(fleet):
        file_path = 'drive/MyDrive/_problem_instances/exercise_instances/' + fleet + '.txt'
        fleet = []

        with open(file_path, "rt") as f:
            lines = f.readlines()

            # Iterating over the lines in the file to extract information
            for line in lines[1:]:
                stl = line.split()

                # Extracting ev information
                if len(stl) == 6:
                    ev = {
                        'VehicleID' : stl[0],
                        'load_capacity' : stl[1],
                        'battery_capacity' : float(stl[2]),
                        'energy_cons_rate' : float(stl[3]),
                        'velocity' : float(stl[4]),
                        'swapping_time' : float(stl[5])
                    }
                    fleet.append(ev)

        return fleet

#Extracting a list of indices for stastion
def get_station(nodes):
    return [nodes.index(node) for node in nodes if node['node_type'] == 'f']

#Extracting a list of indices for customer
def get_customer(nodes):
    return [nodes.index(node) for node in nodes if node['node_type'] == 'c']

#Extracting the ready time value from each node
def get_ready_time(nodes):
    ready_time = [node['ready_time'] for node in nodes]
    return ready_time

#Extracting the due time value from each node
def get_due_time(nodes):
    due_time = [node['due_time'] for node in nodes]
    return due_time

#Extracting the service time value from each node
def get_service_time(nodes):
    service_time = [node['service_time'] for node in nodes]
    return service_time

#Extracting the load capacity value from each ev
def get_load_capacity(fleet):
    load_capacity = [ev['load_capacity'] for ev in fleet]
    return load_capacity

#Extracting the battery capacity value from each ev
def get_battery_capacity(fleet):
    battery_capacity = [ev['battery_capacity'] for ev in fleet]
    return battery_capacity

#Extracting the energy consumption rate value from each ev
def get_energy_cons_rate(fleet):
    energy_cons_rate = [ev['energy_cons_rate'] for ev in fleet]
    return energy_cons_rate

#Extracting the velocity value from each ev
def get_velocity(fleet):
    velocity = [ev['velocity'] for ev in fleet]
    return velocity

#Extracting the swapping time value from each ev
def get_swapping_time(fleet):
    swapping_time = [ev['swapping_time'] for ev in fleet]
    return swapping_time

#Calculating the Eucledian distance between every pair of nodes
def get_distance_matrix(nodes):
    distance_matrix = np.zeros((len(nodes), len(nodes)))
    for i in range(len(nodes)):
        for j in range(len(nodes)):
            if i != j:
                distance_matrix[i][j] = np.sqrt((nodes[i]['x'] - nodes[j]['x'])**2 + (nodes[i]['y'] - nodes[j]['y'])**2)
    return distance_matrix